Counting Inversions - Trace
[1,4,5,2,0,1,10,3,4,8]

lower = 0
upper = 8
mid = 4


Step 1.l: (return [0,1,2,4,5, x x x x x], swaps=6)
left: [1 4 5 2 0, x x x x x], (0, 4)  -> [0,1,2,4,5], swaps=6

    Step 1.l.l: (return [1,4,5], swaps=0)
    left [1, 4, 5]: (0, 2)

        Step 1.l.l.l: (return [1,4], swaps=0)
        left: [1, 4] (0,1) ->
             swaps = 0

        Step 1.l.l.r: (return [5], swaps=0)
        right: [x x 5]  (2,2) ->
              swaps = 0

        Step 1.l.l.m: (return [1,4,5], swaps=0)
        arr: [1,4, 5] -> (lower=0, mid=1, upper=2)
            (i=0, j=2) (1<=5: true) swaps=0 -->
            (i=1, j=2) (4<=5: true) swaps=0 -->
            (i=2, j=2) (exit)

        Step 1.l.l.s: (return [1,4,5], swaps=0+0+0=0)

     
    Step 1.l.r: (return [x x x 0,2] swaps=1)
    right: [x x x 2,0]: (3,4) -> 
        swaps = 1, [0,2]


    Step 1.l.m: (return [0,1,2,4,5], swaps=5)
    arr: [1,4,5, 0,2] -> (lower=0, mid=2, upper=4)
        (i=0, j=3) (1<=0: false) swaps=3 --> [0,1,4,5, 2]
        (i=1, j=4) (1<=2: true)  swaps=0 -->
        (i=2, j=4) (4<=2: false) swaps=2 --> [0,1,2,4, 5]
        (i=3, j=5) (exit)

    Step 1.l.s (return [0,1,2,4,5], swaps= 1+5)


Step 1.r: (return [x x x x x 1,3,4,8,10], swaps=3)
right: [x x x x x 1 10 3 4 8], (5, 9) ->

    Step 1.r.l: (return [x x x x x 1 3 10], swaps=1)
    left: [x x x x x 1 10 3]: (5,7)
        swaps=0

        Step 1.r.l.l: (return [x x x x x 1 10], swaps=0)
        left: [x x x x x 1 10]: (5,6)
            swaps=0

        Step 1.r.l.r: (return [x x x x x x x 3], swaps=0)
        right: [x x x x x x x 3] (7)
            swaps=0

        Step 1.r.l.m: (return [x x x x x 1, 3, 10], swaps=1)
        arr: [x x x x x 1,10, 3] (lower=5, mid=6, upper=7)
            (i=5, j=7) (1<=3: true) swaps=0 -->
            (i=6, j=7) (10<=3: false) swaps=1 --> [x x x x x 1, 3, 10]
            (i=7, j=8) (exit)  

        Step 1.r.l.s: (return [x x x x x 1, 3, 10], swaps=1+0+0=1)

    Step 1.r.r: (return x x x x x x x x 4 8], swaps=0)
    right: [x x x x x x x x 4 8]: (8,9)
        swaps=0;

    Step 1.r.m: (return [x x x x x 1,3,4,8,10], swaps=2)
    arr: [x x x x x, 1,3,10, 4,8] (lower=5, mid=6, upper=9)
        (i=5, j=8) (1<=4: true)   swaps=0 --> [x x x x x 1, 3,10, 4,8]
        (i=6, j=8) (3<=4: true)   swaps=0 --> [x x x x x 1,3, 10, 4,8]
        (i=7, j=8) (10<=4: false) swaps=1 --> [x x x x x 1,3,4, 10, 8]
        (i=8, j=9) (10<=8: false) swaps=1 --> [x x x x x 1,3,4,8, 10 ]
        (i=9, j=10) (exit)
    
    Step 1.r.s: (return [x x x x x 1,3,4,8,10], swaps=1+0+2=3)

Step 1.m: (return [0,1,1,2,3,4,4,5,8,10], swaps=3+2+1=6)
arr: [0,1,2,4,5, 1,3,4,8,10] (lower=0, mid=4, upper=9)
    (i=0, j=5) (0<=1: true)   swaps=0 --> [0, 1,2,4,5, 1,3,4,8,10]
    (i=1, j=5) (1<=1: true)   swaps=0 --> [0,1, 2,4,5, 1,3,4,8,10]
    (i=2, j=5) (2<=1: false)  swaps=3 --> [0,1,1, 2,4,5, 3,4,8,10]
    (i=3, j=6) (2<=3: true)   swaps=0 --> [0,1,1,2, 4,5, 3,4,8,10]
    (i=4, j=6) (4<=3: false)  swaps=2 --> [0,1,1,2,3, 4,5, 4,8,10]
    (i=5, j=7) (4<=4: true)   swaps=0 --> [0,1,1,2,3,4, 5, 4,8,10]
    (i=6, j=7) (5<=4: false)  swaps=1 --> [0,1,1,2,3,4,4, 5, 8,10]
    (i=7, j=8) (5<=8: false)  swaps=0 --> [0,1,1,2,3,4,4,5, 8, 10]
    (i=8, j=8) (exit)

Step 1.s: (return [0,1,1,2,3,4,4,5,8,10], swaps=6+3+6=15)
